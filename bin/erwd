#!/usr/bin/env node
const find = require('find');
const { ArgumentParser } = require('argparse');

const build = require('../index');
const { exit }= require('../utils/utils');
const layoutAlgorithms = require('../layout-algorithms');
const widthAlgorithms = require('../width-algorithms');

const parser = new ArgumentParser({
  version: '0.0.1',
  addHelp: true,
  description: 'Easy-RWD'
});
parser.addArgument(
  ['-la', '--layout-algorithm'],
  {
    help: 'Set the layout algorithm.',
    choices: Object.keys(layoutAlgorithms),
    defaultValue: 'leftJustified',
  }
);
parser.addArgument(
  ['-wa', '--width-algorithm'],
  {
    help: 'Set the width algorithm.',
    choices: Object.keys(widthAlgorithms),
    defaultValue: 'flexDAG',
  }
);
parser.addArgument(
  ['-o', '--output-directory'],
  {
    help: 'Directory generated files should be placed in.',
    defaultValue: './build',
  }
);
parser.addArgument(
  'jsonfile',
  {
    help: 'The JSON app specification.',
    nargs: '?',
  }
);
const args = parser.parseArgs();

// If no file is named, try to get the only json file.
// if file is named, verify it exists
// TODO: search current directory only (no child directories)
let file = args.jsonfile;
if (!file) {
  const files = find.fileSync(/\.json$/, '.');
  if (files.length === 0) {
    exit('No JSON file found in the current directory.', 1);
  } else if (files.length > 1) {
    exit('More than JSON file found. Please specify filename.', 1);
  } else {
    file = files[0]; // eslint-disable-line prefer-destructuring
  }
} else if (find.fileSync(file, '.').length !== 1) {
  exit(`File ${file} not found.`, 1);
}

const dir = args.output_directory;
const layoutAlgorithm = layoutAlgorithms[args.layout_algorithm];
const widthAlgorithm = widthAlgorithms[args.width_algorithm];

build(file, layoutAlgorithm, widthAlgorithm, dir);
